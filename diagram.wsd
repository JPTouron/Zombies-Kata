@startuml "Zombies Class diagram"

title "Zombies Class diagram"


frame Gear{

    interface IEquipment{
        +string Name { get; }
    }

    abstract class EquipmentBase
    {
        +string Name {get;}
    }
    IEquipment <|--EquipmentBase

    class NoEquipment
    {
        +string Name {get;}
    }

    note right
        ""Name => string.empty""
    end note

    EquipmentBase <|-right- NoEquipment


    class Equipment
    {
        +ctor(string Name)
        __
        +string Name {get;}
    }

    EquipmentBase <|-- Equipment
}
frame Inventory{

    interface IInventoryHandler
    {
        +IReadOnlyCollection<IEquipment> Items { get; }
        +void AddEquipment(IEquipment equipment)
        +bool ContainsEquipment(IEquipment equipment)
        +void ReduceCapacityBy(int reduction)
    }

    class InventoryProvider{
        +IInventoryHandler GetInventory()
    }
    note left
        //factory class//
    end note
    IInventoryHandler o-left- InventoryProvider

    class InventoryHandler
    {
        -int capacity
        -IList<Equipment> items;
        ..
        +ctor()
        __
        +IReadOnlyCollection<Equipment> Items {get;}
        ..
        +void AddEquipment(Equipment equipment)
        +void ReduceCapacityBy(int reduction)
        +bool ContainsEquipment(Equipment equipment)
    }

    note right
        manages all the equipment
        a Survivor may carry
        In Hand or In Reserve

        ""ReduceCapacityBy(...)""
        //would loose a random equipment//
    end note

    IInventoryHandler <|- InventoryHandler
    Equipment *-- InventoryHandler
}

enum State{
    +Alive
    +Dead
}

interface IHealth
{
    +State CurrentState  { get; }
    +int Wounds { get;}
    +Wound(int inflictedWounds)
}

class Health
{
    +ctor()
    __
    +State CurrentState { get; private set; }
    +int Wounds { get; private set;}
    +Wound(int inflictedWounds)
}

note right
    "" Wound() ""
    "" if inflictedWounds < 2 => Dead""
end note

State *- Health
IHealth <|- Health


class Survivor
{
    -InventoryHandler InventoryHandler
    -const int capacityReductionPerWound = 1
    -IEquipment rightHandEquip
    -IEquipment leftHandEquip
    ..
    +ctor(string name)
    __
    +string Name {get;}
    +int RemainingActions  { get; }
    --
    +State CurrentState  { get; }
    +int Wounds { get; }
    ..
    +void Wound(int inflictedWounds)
    +void AddEquipment(IEquipment equipment);
    ..
    +IEquipment RightHandEquip {get;set;}
    +IEquipment LeftHandEquip {get;set;}
    +IReadOnlyCollection<IEquipment> Items {get;}
}

note right
    // Survivor would be initialized with: zero wounds, //
    // three remaining actions, Alive CurrentState //

    "" AddEquipment(..) ""
    // InventoryHandler.Add...//

    ""Items""
    // All available items //


end note

Health +-up- Survivor
IHealth <|-Survivor

InventoryHandler +-- Survivor

@enduml